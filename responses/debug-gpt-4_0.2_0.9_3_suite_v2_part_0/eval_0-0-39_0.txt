Yes, you can accomplish this by using the `ref` attribute in React. You can create a reference to the form in the `CustomForm` component and then pass this reference to the parent component (`App`) via a callback prop. Then, in the `App` component, you can use this reference to submit the form when the 'In Root' button is clicked.

Here's how you can do it:

```javascript
import React, { Component, createRef } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = createRef();

  componentDidMount() {
    // Pass the form reference to the parent component
    this.props.onFormRef(this.formRef);
  }

  render() {
    return (
    );
  }
}

class App extends Component {
  handleFormRef = (formRef) => {
    this.formRef = formRef;
  }

  handleSubmit = () => {
    if (this.formRef.current) {
      this.formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  }

  render() {
    return (
      <div>
        <CustomForm onFormRef={this.handleFormRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this code:

1. `CustomForm` creates a reference to the form using `createRef()`, and then passes this reference to the parent component (`App`) via the `onFormRef` prop.

2. `App` saves this reference in `this.formRef` and uses it to submit the form when the 'In Root' button is clicked.

3. The `handleSubmit` method in `App` dispatches a 'submit' event on the form when the 'In Root' button is clicked.

4. The `onSubmit` handler in `CustomForm` prevents the default form submission and shows an alert instead.