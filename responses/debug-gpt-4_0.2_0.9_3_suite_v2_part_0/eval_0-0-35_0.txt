You should be using `REDIS_TLS_URL` if you want to connect to Heroku Redis using TLS. Here's a simple example of how you can do this using `node_redis`:

```javascript
var redis = require('redis');
var url = require('url');

var redisURL = url.parse(process.env.REDIS_TLS_URL);
var client = redis.createClient(redisURL.port, redisURL.hostname, { no_ready_check: true });

client.auth(redisURL.auth.split(":")[1]);

client.on('connect', function() {
    console.log('connected');
});
```

In this example, we're using the `url` module to parse the `REDIS_TLS_URL` environment variable into a URL object. We then pass the port and hostname to `redis.createClient` to create a new Redis client.

We also pass an options object with `no_ready_check` set to `true`. This tells `node_redis` not to perform a `READY` check when it connects to the Redis server. This is necessary when connecting to Heroku Redis because Heroku does not support the `READY` command.

Finally, we use the `auth` method to authenticate with the Redis server using the password from the `REDIS_TLS_URL` environment variable.

Please note that you need to enable the `tls` option when creating the client to enforce a secure connection. Here's how you can do it:

```javascript
var client = redis.createClient({
    url: process.env.REDIS_TLS_URL,
    tls: {
        rejectUnauthorized: false
    }
});
```

In this example, `rejectUnauthorized` is set to `false` to allow connections to Heroku Redis even though it uses self-signed certificates. In a production environment, you should use a more secure method of validating the server's identity.