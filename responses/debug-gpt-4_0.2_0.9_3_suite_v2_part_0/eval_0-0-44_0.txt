In Mongoose, you can create an index on a field by using the `@Prop` decorator with the `index` option set to `true`, as you have done. However, the index is not created immediately when the schema is defined. It is created when the model is compiled and a connection is made to MongoDB.

If you are not seeing the index, it could be because the model has not been compiled or a connection has not been made to MongoDB. 

You can ensure that the index is created by calling the `ensureIndexes` function on the model. This function forces Mongoose to synchronously build the indexes defined in your schema.

Here is how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel(Schema.name) private readonly myModel: Model<Schema>) {}

  async onModuleInit() {
    await this.myModel.init();
  }
}
```

In the above code, `onModuleInit` lifecycle event is used to ensure that the indexes are created when the module is initialized.

Also, ensure that you have connected to MongoDB before calling `ensureIndexes`. If you are not connected to MongoDB, the `ensureIndexes` function will not be able to create the index.