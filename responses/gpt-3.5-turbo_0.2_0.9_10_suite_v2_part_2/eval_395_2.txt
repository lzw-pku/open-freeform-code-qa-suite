You can use an open generic type and specify the type parameter when registering the service. Here's an example:

```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```

This registers `DatabaseService<T>` as the implementation of `IDatabaseService<T>`. When you want to use it with a specific type, you can specify the type parameter like this:

```c#
public class MyController
{
    private readonly IDatabaseService<MyModel> _databaseService;

    public MyController(IDatabaseService<MyModel> databaseService)
    {
        _databaseService = databaseService;
    }

    // ...
}
```