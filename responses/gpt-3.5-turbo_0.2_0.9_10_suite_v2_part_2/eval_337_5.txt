Here's the implementation of the `createPriorityQueue` function in Java:

```java
public static PriorityQueue<Pair<Integer, Integer>> createPriorityQueue() {
    return new PriorityQueue<>((a, b) -> a.getKey() - b.getKey());
}
```

This function creates a new `PriorityQueue` of integer pairs (`Pair<Integer, Integer>`). The smallest key of pairs is considered as priority, so we pass a lambda expression to the constructor of the `PriorityQueue` that compares the keys of the pairs (`a.getKey()` and `b.getKey()`) and returns the difference between them (`a.getKey() - b.getKey()`). This lambda expression defines the ordering of the elements in the priority queue based on their keys.

Note that we use the diamond operator (`<>`) to infer the type parameters of the `PriorityQueue` from the context. This is possible because we're using Java 7 or later.