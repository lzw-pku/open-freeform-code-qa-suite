You can use an open generic type and specify the type argument when registering the service. Here's an example:
```c#
services.AddScoped(typeof(IDatabaseService<>), typeof(DatabaseService<>));
```
This registers `DatabaseService<T>` as the implementation for `IDatabaseService<T>`. When you need to use it, you can specify the type argument like this:
```c#
public class MyController
{
    private readonly IDatabaseService<MyModel> _databaseService;

    public MyController(IDatabaseService<MyModel> databaseService)
    {
        _databaseService = databaseService;
    }

    // ...
}
```