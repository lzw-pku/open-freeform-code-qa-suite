In a console application, you can use the `Host` class to create a host for your application and configure it to read configuration from your `appsettings.json` file. Here's an example of how you can do it:

```c#
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;

var builder = new HostBuilder()
    .ConfigureAppConfiguration((hostingContext, config) =>
    {
        config.AddJsonFile("appsettings.json", optional: true);
    })
    .ConfigureServices((hostContext, services) =>
    {
        // Add your services here
    });

await builder.RunConsoleAsync();
```

In this example, we're using the `HostBuilder` class to create a host for our application. We're configuring the host to read configuration from the `appsettings.json` file using the `ConfigureAppConfiguration` method. We're also configuring our services using the `ConfigureServices` method.

Finally, we're starting the host using the `RunConsoleAsync` method. This will run our console application and keep it running until the user decides to exit.