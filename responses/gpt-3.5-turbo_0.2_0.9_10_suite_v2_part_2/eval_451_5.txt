Here's an example Go code that creates the JSON object you want and prints it to the terminal:

```go
package main

import (
    "encoding/json"
    "fmt"
)

type Client struct {
    Hostname string `json:"Hostname"`
    IP       string `json:"IP"`
    MacAddr  string `json:"MacAddr"`
}

type Clients struct {
    Clients []Client `json:"Clients"`
}

func main() {
    clients := Clients{
        Clients: []Client{
            {
                Hostname: "example.com",
                IP:       "127.0.0.1",
                MacAddr:  "mactonight",
            },
            {
                Hostname: "foo.biz",
                IP:       "0.0.0.0",
                MacAddr:  "12:34:56:78",
            },
        },
    }

    jsonData, err := json.MarshalIndent(clients, "", "  ")
    if err != nil {
        fmt.Println(err)
        return
    }

    fmt.Println(string(jsonData))
}
```

This code defines two structs, `Client` and `Clients`, that represent the JSON object you want to create. It then creates an instance of the `Clients` struct with the data you provided, and uses the `json.MarshalIndent` function to convert it to a JSON string with indentation for readability. Finally, it prints the JSON string to the terminal using `fmt.Println`.