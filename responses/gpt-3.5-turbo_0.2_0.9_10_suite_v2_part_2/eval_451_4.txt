Here's an example of how to create and print the JSON object in Go:

```go
package main

import (
    "encoding/json"
    "fmt"
)

type Client struct {
    Hostname string `json:"Hostname"`
    IP       string `json:"IP"`
    MacAddr  string `json:"MacAddr"`
}

type Clients struct {
    Clients []Client `json:"Clients"`
}

func main() {
    clients := Clients{
        Clients: []Client{
            {
                Hostname: "example.com",
                IP:       "127.0.0.1",
                MacAddr:  "mactonight",
            },
            {
                Hostname: "foo.biz",
                IP:       "0.0.0.0",
                MacAddr:  "12:34:56:78",
            },
        },
    }

    jsonBytes, err := json.MarshalIndent(clients, "", "  ")
    if err != nil {
        fmt.Println("Error marshaling JSON:", err)
        return
    }

    fmt.Println(string(jsonBytes))
}
```

This code defines two structs, `Client` and `Clients`, which represent the JSON object you want to create. The `json` tags on the struct fields specify the names of the corresponding JSON keys.

In the `main` function, we create a `Clients` object with two `Client` objects inside. We then use `json.MarshalIndent` to convert the `Clients` object to a JSON byte slice with indentation for readability. Finally, we print the JSON string to the terminal using `fmt.Println`.