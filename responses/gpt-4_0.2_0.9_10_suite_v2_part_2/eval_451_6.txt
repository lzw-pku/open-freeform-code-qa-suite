You can create the JSON object using Go's built-in `encoding/json` package. Here's how you can do it:

```go
package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type Client struct {
	Hostname string `json:"Hostname"`
	IP       string `json:"IP"`
	MacAddr  string `json:"MacAddr"`
}

type Clients struct {
	Clients []Client `json:"Clients"`
}

func main() {
	clients := Clients{
		Clients: []Client{
			{
				Hostname: "example.com",
				IP:       "127.0.0.1",
				MacAddr:  "mactonight",
			},
			{
				Hostname: "foo.biz",
				IP:       "0.0.0.0",
				MacAddr:  "12:34:56:78",
			},
		},
	}

	jsonData, err := json.MarshalIndent(clients, "", "  ")
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	fmt.Println(string(jsonData))
}
```

This program first defines the structure of the JSON object using Go structs. Then it creates an instance of the `Clients` struct with the data you provided. The `json.MarshalIndent` function is used to convert the Go object to a JSON string with indentation for readability. If there's an error during this process, it will be printed to the terminal and the program will exit. Otherwise, the JSON string is printed to the terminal.