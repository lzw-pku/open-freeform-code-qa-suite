You can create the JSON object by defining a struct for the client and another struct for the list of clients. Then you can use the `json.Marshal` function to convert the struct to JSON. Here is a sample code:

```go
package main

import (
	"encoding/json"
	"fmt"
)

type Client struct {
	Hostname string `json:"Hostname"`
	IP       string `json:"IP"`
	MacAddr  string `json:"MacAddr"`
}

type Clients struct {
	Clients []Client `json:"Clients"`
}

func main() {
	clients := Clients{
		Clients: []Client{
			{
				Hostname: "example.com",
				IP:       "127.0.0.1",
				MacAddr:  "mactonight",
			},
			{
				Hostname: "foo.biz",
				IP:       "0.0.0.0",
				MacAddr:  "12:34:56:78",
			},
		},
	}

	jsonData, err := json.MarshalIndent(clients, "", "  ")
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(string(jsonData))
}
```

This code will print the JSON object to the terminal. The `json:"Hostname"` part is a struct tag that defines how the struct field is encoded to JSON. The `json.MarshalIndent` function is used to format the JSON output with indentation for better readability.