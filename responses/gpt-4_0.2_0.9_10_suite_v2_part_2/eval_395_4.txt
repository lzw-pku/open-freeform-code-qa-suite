You can't directly register a generic interface without specifying the type parameter. However, you can register all the specific implementations of your generic interface like this:

```c#
services.AddScoped<IDatabaseService<User>, UserService>();
services.AddScoped<IDatabaseService<Product>, ProductService>();
// and so on for other types
```

In this example, `UserService` and `ProductService` are the concrete classes that implement `IDatabaseService<User>` and `IDatabaseService<Product>` respectively.

Then, in your controllers, you can inject the specific service you need:

```c#
public class UserController : Controller
{
    private readonly IDatabaseService<User> _userService;

    public UserController(IDatabaseService<User> userService)
    {
        _userService = userService;
    }

    // Your controller methods here
}
```

This way, the DI container will be able to resolve the correct implementation based on the type parameter you use when injecting `IDatabaseService<T>`.