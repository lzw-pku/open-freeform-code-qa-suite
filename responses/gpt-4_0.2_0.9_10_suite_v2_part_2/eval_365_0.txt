If you're using GitHub Actions, you can use the `actions/setup-java` action to set up your Java environment. This action allows you to specify the Java version you want to use.

Here's an example of how you can use it:

```yaml
name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: ./mvnw clean install
```

In this example, the `actions/setup-java@v1` action is used to set up JDK 1.8. After that, the Maven wrapper is used to build the project.

If you want to use a different version of Java, you can simply change the `java-version` parameter to the version you want to use.

If you're using Azure Pipelines, you can use the `UseJava` task to set up your Java environment. Here's an example:

```yaml
steps:
- task: UseJava@0
  inputs:
    version: '1.8'
    jdkArchitecture: 'x64'
- script: ./mvnw clean install
```

In this example, the `UseJava` task is used to set up JDK 1.8. After that, the Maven wrapper is used to build the project.

Again, if you want to use a different version of Java, you can simply change the `version` parameter to the version you want to use.