If you're using a build system like Jenkins, Travis CI, or GitHub Actions, they usually provide a way to specify the Java version you want to use. 

For example, in GitHub Actions, you can use the `setup-java` action to specify the Java version:

```yaml
steps:
- uses: actions/checkout@v2
- name: Set up JDK 11
  uses: actions/setup-java@v2
  with:
    java-version: '11'
    distribution: 'adopt'
- name: Build with Maven
  run: ./mvnw clean install
```

In this example, the `setup-java` action is used to set up JDK 11. Then, the Maven Wrapper is used to run the build.

If you're running the build on your local machine, you can use a version manager like SDKMAN! or jEnv to switch between different Java versions. 

For SDKMAN!, you can install a specific Java version and set it as the default with:

```bash
sdk install java 11.0.11.hs-adpt
sdk default java 11.0.11.hs-adpt
```

For jEnv, you can add a Java version and set it as the global default with:

```bash
jenv add /path/to/java/version
jenv global 11.0
```

After setting the Java version, you can run the Maven Wrapper with `./mvnw clean install`.

Remember to replace '11.0.11.hs-adpt' and '11.0' with the Java version that works with your Maven task.